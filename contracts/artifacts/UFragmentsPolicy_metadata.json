{
	"compiler": {
		"version": "0.4.24+commit.e67f0147"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "minRebaseTimeIntervalSec",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "inRebaseWindow",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "minRebaseTimeIntervalSec_",
						"type": "uint256"
					},
					{
						"name": "rebaseWindowOffsetSec_",
						"type": "uint256"
					},
					{
						"name": "rebaseWindowLengthSec_",
						"type": "uint256"
					}
				],
				"name": "setRebaseTimingParameters",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "owner_",
						"type": "address"
					},
					{
						"name": "uFrags_",
						"type": "address"
					},
					{
						"name": "baseCpi_",
						"type": "uint256"
					}
				],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "rebaseLag_",
						"type": "uint256"
					}
				],
				"name": "setRebaseLag",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "lastRebaseTimestampSec",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "cpiOracle_",
						"type": "address"
					}
				],
				"name": "setCpiOracle",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "queryOracleCpi",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "deviationThreshold_",
						"type": "uint256"
					}
				],
				"name": "setDeviationThreshold",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "marketOracle",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rebaseLag",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rebaseWindowOffsetSec",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "epoch",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rebaseWindowLengthSec",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "marketOracle_",
						"type": "address"
					}
				],
				"name": "setMarketOracle",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getBaseCpi",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "cpiOracle",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "rebase",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "orchestrator",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "sender",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "orchestrator_",
						"type": "address"
					}
				],
				"name": "setOrchestrator",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "uFrags",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "deviationThreshold",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "queryExchangeRate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "exchangeRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "cpi",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "requestedSupplyAdjustment",
						"type": "int256"
					},
					{
						"indexed": false,
						"name": "timestampSec",
						"type": "uint256"
					}
				],
				"name": "LogRebase",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "rateValid",
						"type": "bool"
					},
					{
						"indexed": false,
						"name": "exchangeRate",
						"type": "uint256"
					}
				],
				"name": "LogExchangeRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "cpiValid",
						"type": "bool"
					},
					{
						"indexed": false,
						"name": "cpi",
						"type": "uint256"
					}
				],
				"name": "LogOracleCpi",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "msg",
						"type": "string"
					}
				],
				"name": "LogTest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "OwnershipRenounced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"inRebaseWindow()": {
					"return": "If the latest block timestamp is within the rebase time window it, returns true.        Otherwise, returns false."
				},
				"initialize(address)": {
					"details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
				},
				"initialize(address,address,uint256)": {
					"details": "ZOS upgradable contract initialization method.     It is called at the time of contract creation to invoke parent class initializers and     initialize the contract's state variables."
				},
				"isOwner()": {
					"return": "true if `msg.sender` is the owner of the contract."
				},
				"owner()": {
					"return": "the address of the owner."
				},
				"rebase()": {
					"details": "The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag     Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate     and targetRate is CpiOracleRate / baseCpi"
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"setCpiOracle(address)": {
					"params": {
						"cpiOracle_": "The address of the cpi oracle contract."
					}
				},
				"setDeviationThreshold(uint256)": {
					"params": {
						"deviationThreshold_": "The new exchange rate threshold fraction."
					}
				},
				"setMarketOracle(address)": {
					"params": {
						"marketOracle_": "The address of the market oracle contract."
					}
				},
				"setOrchestrator(address)": {
					"params": {
						"orchestrator_": "The address of the orchestrator contract."
					}
				},
				"setRebaseLag(uint256)": {
					"params": {
						"rebaseLag_": "The new rebase lag parameter."
					}
				},
				"setRebaseTimingParameters(uint256,uint256,uint256)": {
					"params": {
						"minRebaseTimeIntervalSec_": "More than this much time must pass between rebase       operations, in seconds.",
						"rebaseWindowLengthSec_": "The length of the rebase window in seconds.",
						"rebaseWindowOffsetSec_": "The number of seconds from the beginning of the rebase interval, where the rebase window begins."
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				}
			},
			"title": "uFragments Monetary Supply Policy"
		},
		"userdoc": {
			"methods": {
				"rebase()": {
					"notice": "Initiates a new rebase operation, provided the minimum time period has elapsed."
				},
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				},
				"setCpiOracle(address)": {
					"notice": "Sets the reference to the CPI oracle."
				},
				"setDeviationThreshold(uint256)": {
					"notice": "Sets the deviation threshold fraction. If the exchange rate given by the market        oracle is within this fractional distance from the targetRate, then no supply        modifications are made. DECIMALS fixed point number."
				},
				"setMarketOracle(address)": {
					"notice": "Sets the reference to the market oracle."
				},
				"setOrchestrator(address)": {
					"notice": "Sets the reference to the orchestrator."
				},
				"setRebaseLag(uint256)": {
					"notice": "Sets the rebase lag parameter. It is used to dampen the applied supply adjustment by 1 / rebaseLag If the rebase lag R, equals 1, the smallest value for R, then the full supply correction is applied on each rebase cycle. If it is greater than 1, then a correction of 1/R of is applied on each rebase."
				},
				"setRebaseTimingParameters(uint256,uint256,uint256)": {
					"notice": "Sets the parameters which control the timing and frequency of        rebase operations.        a) the minimum time period that must elapse between rebase cycles.        b) the rebase window offset parameter.        c) the rebase window length parameter."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/UFragmentsPolicy.sol": "UFragmentsPolicy"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/UFragments.sol": {
			"keccak256": "0xa8d2773064ea6b34ef55b9b733dea85eca0ecaf8a7ccfc8db5a073d1c7d9cb13",
			"urls": [
				"bzzr://1c84f35930ebb5ee3551e661fc409c43ae8b38dd0a2eed9385d47dcf711adfbc"
			]
		},
		"localhost/contracts/UFragmentsPolicy.sol": {
			"keccak256": "0x5a804a99549777d36b6b18c631e98cb6dbda815953559293cea210358bdd04d4",
			"urls": [
				"bzzr://753e6368b3b5caddd28077e582a9ef40f95cf623e1f09294a068337b0f2a11e5"
			]
		},
		"localhost/contracts/lib/SafeMathInt.sol": {
			"keccak256": "0xefed5c4a0229c973a6168fdd5eb2b51d76072262b9743a78342098bedf98e1e1",
			"urls": [
				"bzzr://8f99fe607f80c0792ca5c2d2df045649868f826751184bb25990b9bbdf9d03fd"
			]
		},
		"localhost/contracts/lib/UInt256Lib.sol": {
			"keccak256": "0x80aeb79ffdedb45f07490869a5bdac6c2b9af8f500a570862891f8f0ab4934a4",
			"urls": [
				"bzzr://643e682b5d2e63601f41efd8672447d0fa876cd8742c59711761ecbaaa9414c2"
			]
		},
		"openzeppelin-eth/contracts/math/SafeMath.sol": {
			"keccak256": "0xca27427124232a675642ba45303b78d5a36e1207ee222030ef249e11eba5a224",
			"urls": [
				"bzzr://013c67962737acca577ecd24e6b6c80f85b05fd03c1c75ab68f65a084f4b4cfd"
			]
		},
		"openzeppelin-eth/contracts/ownership/Ownable.sol": {
			"keccak256": "0x1c591a78d1b95b5f22f6769116eeedb627334475ae005a6c8228598981f74989",
			"urls": [
				"bzzr://4b76436911177bd8b9ba061d626731bb90f61c6be482fe94d2b96e8be169cd83"
			]
		},
		"openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol": {
			"keccak256": "0x8034b14917a770a79a761769bfff95464ad431fad758be410f3a57ffd80a61c6",
			"urls": [
				"bzzr://093ccda4f849bc03c8d68aa5b3f94b43cfa73d8392452b1a45d6d4e1f966f1f0"
			]
		},
		"openzeppelin-eth/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x0786a09def412e5a92e1da8545114b39f9bbd8bd1ba6f62a5bf8b81f54ab25bf",
			"urls": [
				"bzzr://b35dbbf6dd505fcb601ca968d4628714a3af84024224228433eadf700e94f250"
			]
		},
		"zos-lib/contracts/Initializable.sol": {
			"keccak256": "0xac4cc87395794e21e95549a1b4002881621d59878c4129d534a0089ce5cf7212",
			"urls": [
				"bzzr://1725ac3e1941f8e2bf5c1966abd66bd744d40c85ae8195eb697ec3256bc1fc39"
			]
		}
	},
	"version": 1
}